# -*- coding: utf-8 -*-
"""Base_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A7pNX0c0UZtbPr6J-BXqzOOc7p5dijBL
"""

!pip install goto-statement

# import igraph as ig
import json
import urllib.request
import numpy as np
import scipy.stats
import operator
from random import randint
from goto import with_goto
alpha = 0.2
NOQ = 0
Questions_asked = []
answers_given = []
no_of_questions_asked = 0

def Layer1(eras_dict,birth_date,count):
  global NOQ
  global no_of_questions_asked
  
#   print("che")
  years = list(map(int, eras_dict.keys())) 
  era_min = min(years)-(min(years)%10)
  era_max = max(years)-(max(years)%10)
#   print(era_min,era_max)
  birth_year = int(birth_date[0:])
  probability_scores_eras = []
  eras = []
  i = era_min
  era_wise_movies = []
  final_movies = set()
  
  while i < era_max+10:
    temp_score = 0
    count_movies = 0
    limit = i + 10
    eras.append(i)
    movies_set = set()
    
    while i < limit :
      temp_score += scipy.stats.norm(birth_year+20,10).pdf(i)
      if i in years :
        movies = list(eras_dict[str(i)])
        movies_set.update(movies)
        final_movies.update(movies)
        count_movies+= len(movies)
      i+=1
    
    era_wise_movies.append(movies_set)
    probability_scores_eras.append(temp_score+(count_movies/89))
  
#   Layer1_prob_dump(eras) 
  
  with open('layer1_prob.json','r') as json_file:  
      scores = json.load(json_file)
      
  primary_keys = list(map(int, scores.keys()))
  
  for i in range(len(primary_keys)):
    probability_scores_eras[i] += (scores[str(primary_keys[i])]/count)
    
  sorted_eras = [eras for _, eras in sorted(zip(probability_scores_eras,eras))]
  sorted_era_wise_movies = [eras for _, eras in sorted(zip(probability_scores_eras,era_wise_movies))]
  
  probability_scores_eras.sort()
  probability_scores_eras.reverse()
#   print(probability_scores_eras)
  sorted_eras.reverse()
#   print(sorted_eras)
  sorted_era_wise_movies.reverse()
#   print(final_movies)
  for i in range(no_of_questions_asked):
    Question = "Is the movie from " + str(sorted_eras[i]) + "s era ? Y/N/M :"
    Questions_asked.append(Question)
    NOQ+=1
    choice = input(Question)
    Answers_given.append(choice.lower())
    if choice.lower() == 'n':
      final_movies = final_movies.difference(sorted_era_wise_movies[i])
#       print(sorted_era_wise_movies[i])
#       print(final_movies)
    elif choice.lower() == 'y':
      final_movies = sorted_era_wise_movies[i]
      break
    elif choice.lower() == 'm':
      continue
    else:
      print("Incorrect Code")
      exit()
      
  return list(final_movies)

def Layer2(file,movies,count):
  global NOQ
  global no_of_questions_asked
  
  genre_list = list(file["genre_new"].keys())
  total_movie=89
  
  with open('layer2_prob.json', 'r') as fp:                    #Read_from_layer2
    layer2_prob = json.load(fp)
    
  genre_score={}
  for i in genre_list:
    genre_score[i] = alpha*(len(file["genre_new"][i])/total_movie)+(layer2_prob[i]/count)*(1-alpha)
    
  sorted_genre_score = dict(sorted(genre_score.items(), key=lambda kv: kv[1],reverse=True))
#   print(sorted_genre_score)
  sorted_genre_key = sorted_genre_score.keys()
#   print(sorted_genre_key)

  genre_count=0 
  
  for i in sorted_genre_key:
#     print(genre_count,no_of_questions_asked)
    movie_1 = list((set(file["genre_new"][i])).intersection(set(movies)))
#     print("Movie : ",movies)
    if genre_count==no_of_questions_asked:
      break
    if(len(movie_1)):
      question = "Is "+str(i)+" the genre of your movie ?\n Yes/No/Maybe : "
      genre_count+=1
      Questions_asked.append(question)
      NOQ+=1
      choice = input(question)
      Answers_given.append(choice.lower())
      if choice.lower() == 'y':
        new_movie = list((set(file["genre_new"][i])).intersection(set(movies)))
        return new_movie
      
      elif choice.lower() == 'n':
        movies = list((set(movies).difference(set(file["genre_new"][i]))))
        
      elif choice.lower() == 'm':
        continue        
      else:
        break
      
  return movies

def Layer3(file,movies,count):
  global NOQ
  global no_of_questions_asked
  
  genre_list = list(file["subject_new"].keys())
  total_movie=89

  with open('layer3_prob.json', 'r') as fp:                    #Read_from_layer2
    layer2_prob = json.load(fp)
    
  genre_score={}
  for i in genre_list:  
    genre_score[i] = alpha*(len(file["subject_new"][i])/total_movie)+(layer2_prob[i]/count)*(1-alpha)
    
  sorted_genre_score = dict(sorted(genre_score.items(), key=lambda kv: kv[1],reverse=True))
  sorted_genre_key = sorted_genre_score.keys()
  
  genre_count=0 
  
  for i in sorted_genre_key:
    movie_1 = list((set(file["subject_new"][i])).intersection(set(movies)))

    if genre_count==no_of_questions_asked:
      break
    if(len(movie_1)):
      
      question = "Is "+str(i)+" the subject of your movie ?\n Yes/No/Maybe : "
      genre_count+=1
      Questions_asked.append(question)
      NOQ+=1
      
      choice = input(question)
      Answers_given.append(choice.lower())
      if choice.lower() == 'y':
        new_movie = list((set(file["subject_new"][i])).intersection(set(movies)))
        return new_movie

      elif choice.lower() == 'n':
        movies = list((set(movies).difference(set(file["subject_new"][i]))))
        
      elif choice.lower() == 'm':
        continue
        
      else:
        break
      
  return movies

def Layer4(file,movies,count):
  global NOQ
  global no_of_questions_asked
  
  genre_list = list(file["starring"].keys())
  total_movie=89
  
  with open('layer4_prob.json', 'r') as fp:                    #Read_from_layer2
    layer2_prob = json.load(fp)
    
  genre_score={}
  for i in genre_list:  
    genre_score[i] = alpha*(len(file["starring"][i])/total_movie)+(layer2_prob[i]/count)*(1-alpha)
    
  sorted_genre_score = dict(sorted(genre_score.items(), key=lambda kv: kv[1],reverse=True))
  sorted_genre_key = sorted_genre_score.keys()
  
  genre_count=0 
  
  for i in sorted_genre_key:
    movie_1 = list((set(file["starring"][i])).intersection(set(movies)))

    if genre_count==no_of_questions_asked:
      break
      
    if(len(movie_1)):
      question = "Is "+str(i)+" an actor of your movie ?\n Yes/No/Maybe : "
      genre_count+=1
      Questions_asked.append(question)
      NOQ+=1
      
      choice = input(question)
      Answers_given.append(choice.lower())
      if choice.lower() == 'y':
        new_movie = list((set(file["starring"][i])).intersection(set(movies)))
        return new_movie

      elif choice.lower() == 'n':
        movies = list((set(movies).difference(set(file["starring"][i]))))
        
      elif choice.lower() == 'm':
        continue
        
      else:
        break
      
  return movies

def Layer5(file,movies,count):
  global NOQ
  global no_of_questions_asked
  
  genre_list = list(file["director"].keys())
  total_movie=89
  
  with open('layer5_prob.json', 'r') as fp:                    #Read_from_layer2
    layer2_prob = json.load(fp)
    
  genre_score={}
  for i in genre_list:  
    genre_score[i] = alpha*(len(file["director"][i])/total_movie)+(layer2_prob[i]/count)*(1-alpha)
    
  sorted_genre_score = dict(sorted(genre_score.items(), key=lambda kv: kv[1],reverse=True))
  sorted_genre_key = sorted_genre_score.keys()
  
  genre_count=0 
  
  for i in sorted_genre_key:
    movie_1 = list((set(file["director"][i])).intersection(set(movies)))
#     print("Movie : ",movies)
    if genre_count==no_of_questions_asked:
      break
    if(len(movie_1)):
      question = "Is "+str(i)+" the director of your movie ?\n Yes/No/Maybe : "
      genre_count+=1
      Questions_asked.append(question)
      NOQ+=1
      
      choice = input(question)
      Answers_given.append(choice.lower())
      if choice.lower() == 'y':
        new_movie = list((set(file["director"][i])).intersection(set(movies)))
        return new_movie

      elif choice.lower() == 'n':
        movies = list((set(movies).difference(set(file["director"][i]))))
        
      elif choice.lower() == 'm':
        continue
        
      else:
        break
      
  return movies

def Layer6(file,movies,count):
  
  global NOQ
  global no_of_questions_asked
  
  genre_list = list(file["musicComposer"].keys())
  total_movie=89
  
  with open('layer6_prob.json', 'r') as fp:                    #Read_from_layer2
    layer2_prob = json.load(fp)
    
  genre_score={}
  for i in genre_list:  
    genre_score[i] = alpha*(len(file["musicComposer"][i])/total_movie)+(layer2_prob[i]/count)*(1-alpha)
    
  sorted_genre_score = dict(sorted(genre_score.items(), key=lambda kv: kv[1],reverse=True))
  sorted_genre_key = sorted_genre_score.keys()
  
  genre_count=0 
  for i in sorted_genre_key:
    movie_1 = list((set(file["musicComposer"][i])).intersection(set(movies)))
#     print("Movie : ",movies)
    if genre_count==no_of_questions_asked:
      break
    if(len(movie_1)):
      question = "Is "+str(i)+" the music composer of your movie ?\n Yes/No/Maybe : "
      genre_count+=1
      Questions_asked.append(question)
      NOQ+=1
      
      choice = input(question)
      Answers_given.append(choice.lower())
      
      if choice.lower() == 'y':
        new_movie = list((set(file["musicComposer"][i])).intersection(set(movies)))
        return new_movie
        break;
      elif choice.lower() == 'n':
        movies = list((set(movies).difference(set(file["musicComposer"][i]))))
      elif choice.lower() == 'm':
        continue
      else:
        break
      
  return movies

def random_questioning(movies,file,count):
  global no_of_questions_asked
  options = {2 : Layer2,
             3 : Layer3,
             4 : Layer4,
             5 : Layer5,
             6 : Layer6}
  used = []
  for i in range(0,3):
    key=randint(2, 6)
    while key in used :
      key=randint(2, 6)
    no_of_questions_asked=1
    movies = options[key](file,movies,count)
    
  return movies

def trace(movie_val,file3):
#   print(len(Questions_asked),len(Answers_given))
  print("Trace of your responses :")
  print("Questions asked                                  Responses Given")
  print("----------------------------------------------------------------")
  for i in range(len(Questions_asked)):
    print(Questions_asked[i]+"                         "+Answers_given[i])
    
  print("Correct Answers are:")
  print("Era :",file3[movie_val]['release_year'])
  print("Genre :",file3[movie_val]['genre_new'])
  print("Subject :",file3[movie_val]['subject_new'])
  print("Actor :",file3[movie_val]['starring'])
  print("Director :",file3[movie_val]['director'])
  print("Music Director :",file3[movie_val]['musicComposer'])

def update_val(file3,movie_val):
  
  era = file3[movie_val]['release_year'][0]

  with open('layer1_prob.json','r') as json_file:  
    layer1 = json.load(json_file)

  layer1[str(era)]+=1

  with open('layer1_prob.json', 'w') as fp:                  
    json.dump(layer1, fp, sort_keys=True, indent=4)

  genre = file3[movie_val]['genre_new']

  with open('layer2_prob.json','r') as json_file:  
    layer2 = json.load(json_file)

  for i in genre:
    layer2[str(i)]+=1

  with open('layer2_prob.json', 'w') as fp:                  
    json.dump(layer2, fp, sort_keys=True, indent=4)

  subject = file3[movie_val]['subject_new']

  with open('layer3_prob.json','r') as json_file:  
    layer3 = json.load(json_file)

  for i in subject: 
    layer3[str(i)]+=1

  with open('layer3_prob.json', 'w') as fp:                  
    json.dump(layer3, fp, sort_keys=True, indent=4)

  actor = file3[movie_val]['starring']

  with open('layer4_prob.json','r') as json_file:  
    layer4 = json.load(json_file)

  for i in actor:
    layer4[str(i)]+=1

  with open('layer4_prob.json', 'w') as fp:                  
    json.dump(layer4, fp, sort_keys=True, indent=4)

  director = file3[movie_val]['director']

  with open('layer5_prob.json','r') as json_file:  
    layer5 = json.load(json_file)

  for i in director:
    layer5[str(i)]+=1

  with open('layer5_prob.json', 'w') as fp:                  
    json.dump(layer5, fp, sort_keys=True, indent=4)

  composer = file3[movie_val]['musicComposer']

  with open('layer6_prob.json','r') as json_file:  
    layer6 = json.load(json_file)

  for i in composer:
    layer6[str(i)]+=1

  with open('layer6_prob.json', 'w') as fp:                  
    json.dump(layer6, fp, sort_keys=True, indent=4)

@with_goto
def main():
  
  global no_of_questions_asked
  global NOQ
  
  while(True):

    choice = input("Do you want to play 20Q-Game ? Y/N :")
    if choice.lower() == 'y':
      Questions_asked = []
      Answers_given = []
      NOQ = 0
      
      with open('count.json','r') as json_file:  
        file1 = json.load(json_file)

      count = file1["count"]
      file1["count"]+=1

      with open('count.json', 'w') as fp:                    #write_in_layer2
        json.dump(file1, fp, sort_keys=True, indent=4)

  #     name = input("Please enter your Name :")
      birth_date = input("Please enter your Birthyear in YYYY format :")
    
      with open('filtered_data_to_movie.json','r') as json_file:  
        file2 = json.load(json_file)
      with open('filtered_movie_to_data.json','r') as json_file:  
        file3 = json.load(json_file)

#       all_Layer_prob_dump(file2)
#       return
      primary_keys = list(file2.keys())
  #     Layer2_prob_dump(file)

#       print("ddgdg")
      eras = file2['release_year']
      no_of_questions_asked = 1
      movies = Layer1(eras,birth_date,count)
      if len(movies)>5:
        no_of_questions_asked = 1
        movies = Layer2(file2,movies,count)
      if len(movies)>5:
        no_of_questions_asked = 1
        movies = Layer3(file2,movies,count)
      if len(movies)>5:
        no_of_questions_asked = 2
        movies = Layer4(file2,movies,count)
      if len(movies)>5:
        no_of_questions_asked = 1
        movies = Layer5(file2,movies,count)
      if len(movies)>5:
        no_of_questions_asked = 1
        movies = Layer6(file2,movies,count)

      label .jump
#       print("zsfddgd")
#       print(len(movies))
      if 0 < len(movies) <= 5 :

        print("Most Probable guess for the movies are :")
        for i in movies:
          print(file3[i]["label"])

        Next_choice = input("Is your movie in the given list ? Y/N :")
        print(len(Questions_asked))
        if Next_choice.lower() == 'y':

          update_choice = int(input("Enter the index of the correct movie :"))
          movie_val = movies[update_choice-1]

          update_val(file3,movie_val)
          
        else:
          print("You entered an incorrect choice somewhere !!!")
          
          movie_val = int(input("Enter the index of the correct movie :"))
          movie_val = str(movie_val - 1)

          update_val(file3,movie_val)
                     
          trace(movie_val,file3)
          
      elif len(movies) > 5:

        print("Most Probable guess for the movies are :")

        for i in movies[0:5]:
          print(file3[str(i)]["label"])

        Next_choice = input("Is your movie in the given list ? Y/N :")

        if Next_choice.lower() == 'y':
          print(len(Questions_asked))
          update_choice = int(input("Enter the index of the correct movie :"))
          movie_val = movies[update_choice-1]

          update_val(file3,movie_val)

        else:
          movies = set(movies).difference(set(movies[0:5]))
          movies = list(movies)
          
          if NOQ<20:
            movies = random_questioning(movies,file2,count)
            goto .jump

          else:
            print("We give up !!!!")
            print(len(Questions_asked))
            movie_val = int(input("Enter the index of the correct movie :"))
            movie_val = str(movie_val - 1)
            update_val(file3,movie_val)                  

      else:
        print("Does this movie really exist !!, I Don't know any such movie")
    else:
      break

main()

# def count():
#   c_dict={}
#   c_dict['count'] = 0
#   with open('count.json', 'w') as fp:                    #write_in_layer2
#      json.dump(c_dict, fp, sort_keys=True, indent=4)
# count()

# def all_Layer_prob_dump(file):
#   all_layer = ['release_year','genre_new','subject_new','starring','director','musicComposer']
#   json_filename = ['layer1_prob','layer2_prob','layer3_prob','layer4_prob','layer5_prob','layer6_prob'] 
  
#   for a in range(len(all_layer)):
#     genre_list = list(file[all_layer[a]])
#     layer_prob={}
#     for i in genre_list:
#       current_keys = list(layer_prob.keys())
#       if i not in current_keys: 
#         layer_prob[str(i)]=0.0

#     json_name=json_filename[a]+".json"
#     with open(json_name, 'w') as fp:                
#         json.dump(layer_prob, fp, sort_keys=True, indent=4)